# -*- coding: utf-8 -*-
"""Preprocessing with pipelines.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wWO4re2Rkwianz3PEKplMdD4epkw57aL
"""

import pandas as pd
import numpy as np

data= {'Name':['Anna','Bob','Raj','Simran','Dev'],
       'Age':[None,32,45,34,29],
       'Gender':['M','M','M','F','M'],
       'job':['Programmer','Cook','Writer','Teacher','Cook']}

df=pd.DataFrame(data)
df

# Preprocessing Pipeline:
# Drope Name feature
# Impute Age
# Turn Gender into binary/numeric
# one hot encode jobs

from sklearn.impute import SimpleImputer
from sklearn.preprocessing import OneHotEncoder

# Drop Name feature
df=df.drop(['Name'],axis=1)
df

imputer=SimpleImputer(strategy='mean')
df['Age']= imputer.fit_transform(df[['Age']])
df
#df['Age']=df['Age'].fillna(df['Age'].mean()) use can use fillna also.

#Turn Gender into Numeric Feature
gender_dct={'M':0,'F':1}
df['Gender']=[gender_dct[g] for g in df ['Gender']]
df
#df['Gender']=df['Gender'].replace({'M':0 ,'F':1}) we can use replace function

#df1=pd.get_dummies(df)
#df1 we can use get_dummies also,but its add column name to new column+ feature

#one hot encode jobs

# Create a OneHotEncoder instance
encoder=OneHotEncoder()

# Transform the 'job' column and convert it to a NumPy array
matrix= encoder.fit_transform(df[['job']]).toarray()

# Get unique job categories and sort them for column names, it'll not create same column.
column_names= sorted([i for i in df['job'].unique()])

# Iterate over the transposed matrix and create new columns in the DataFrame
for i in range(len(matrix.T)) :
    df[column_names[i]] = matrix.T[i]

# Drop the original 'job' column as it's no longer needed after encoding
df=df.drop(['job'],axis=1)

df

#after getting all the desired result lets create class for each feature
#using sklearn.base

from sklearn.base import BaseEstimator, TransformerMixin
class NameDropper(BaseEstimator,TransformerMixin):
    def fit (self,X,y=None):
        return self
    def transform(self,X):
        return X.drop(['Name'],axis=1)
class AgeImputer(BaseEstimator,TransformerMixin):
    def fit (self,X,y=None):
        return self
    def transform(self,X):
        imputer = SimpleImputer(strategy='mean')
        X['Age']= imputer.fit_transform(X[['Age']])
        return X
class FeatureEncoder (BaseEstimator,TransformerMixin):
    def fit (self,X,y=None):
        return self
    def transform(self,X):
        gender_dct={'M':0,'F':1}
        X['Gender']=[gender_dct[g] for g in X ['Gender']]

        encoder=OneHotEncoder()
        matrix= encoder.fit_transform(X[['job']]).toarray()

        column_names= sorted([i for i in X['job'].unique()])

        for i in range(len(matrix.T)) :
            X[column_names[i]] = matrix.T[i]

        return X.drop(['job'],axis=1)

#Creating new dataset for testing
data= {'Name':['Ram','Sham','Kajal','Dev','Rani','Parag'],
       'Age':[None,32,None,34,29,22],
       'Gender':['M','M','F','M','F','M'],
       'job':['Data_Analyst','Cook','Singer','Teacher','Devloper','Cook']}
df2=pd.DataFrame(data)
df2

#calling our function and storing it into variable to test ,I use fit_tranform.

dropper=NameDropper()
imp=AgeImputer()
enc= FeatureEncoder()

enc.fit_transform(imp.fit_transform(dropper.fit_transform(df2)))

#creating a data preprocessing pipeline
from sklearn.pipeline import Pipeline
pipe=Pipeline([
    #for droping unwanted column 'Name'
    ('dropper',NameDropper()),
    #for imputing missing values in 'Age'
    ('imputer',AgeImputer()),
    #for endoing features
    ('endoder',FeatureEncoder())
])
#fitting and transforming the dataframe using the defined pipeline
pipe.fit_transform(df2)

"""# **Summary**
**Designed a streamlined data preprocessing pipeline using scikit-learn, featuring custom transformers: 'NameDropper' for column removal, 'AgeImputer' for handling missing values in the 'Age' column, and 'FeatureEncoder' for encoding categorical features like 'job'. This efficient pipeline enhances data quality and prepares the dataset for advanced analyses **
"""